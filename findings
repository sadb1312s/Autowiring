autowiring findings
1) No = default
This is default setting which means no autowiring and you should use explicit bean reference for wiring.
You have nothing to do special for this wiring.
<property name="name" ref="some ref"/>

2) By name
This mode specifies autowiring by property name. Spring container looks at the beans on which auto-wire attribute
is set to byName in the XML configuration file. It then tries to match and wire its properties with the beans defined
by the same names in the configuration file. If matches are found, it will inject those beans.
Otherwise, bean(s) will not be wired.
setter has to has a setter with right name i.e if engine bean has name/id "engine" setter has to has name "setEngine"
or "setengine"

3) By type
This mode specifies autowiring by property type.
Spring container looks at the beans on which autowire attribute is set to byType in the XML configuration file.
It then tries to match and wire a property if its type matches with exactly one of the beans name in the configuration
file. If matches are found, it will inject those beans. Otherwise, bean(s) will not be wired
Class has to has a setter for field even field is public
field can has any name, setter's name has to contain "set"+"any thing, but not empty" ("setX", "setx" but not "set");

4) By constructor
This mode is very similar to byType, but it applies to constructor arguments. Spring container looks at the beans on
which autowire attribute is set constructor in the XML configuration file. It then tries to match and wire its
constructor's argument with exactly one of the beans name in the configuration file. If matches are found, it will
inject those beans. Otherwise, bean(s) will not be wired.

5) Autodetect
Spring first tries to wire using autowire by constructor, if it does not work, Spring tries to autowire by byType.
The autodetect option is deprecated!
